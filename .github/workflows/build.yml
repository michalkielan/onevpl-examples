name: build

on: [push, pull_request]

env:
  LD_LIBRARY_PATH: /usr/local/lib64:/usr/local/lib/

jobs:
  build:
      strategy:
        matrix:
          compiler: [{cxx: clang++, cc: clang}, {cxx: g++, cc: gcc}, {cxx: icpx, cc: icx}]

      runs-on: ubuntu-20.04
      steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install Python dependencies
        run: pip install pylint flake8 matplotlib

      - name: Intel Apt repository
        if: matrix.compiler.cxx == 'icpx'
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install -y intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic

      - name: Install dependencies
        run: |
          sudo apt-get install -y \
            build-essential \
            jq \
            meson \
            nasm \
            ninja-build \
            pybind11-dev \
            python3-pybind11 \
            yasm \

      - name: Setup Intel oneAPI environment
        if: matrix.compiler.cxx == 'icpx'
        run: |
          source /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV

      - name: Install onevpl
        run: |
          git clone -b v2022.2.0 https://github.com/oneapi-src/oneVPL onevpl
          cd onevpl
          # Cherry pick libva fix
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
          git remote add libva-fix https://github.com/michalkielan/oneVPL.git
          git fetch libva-fix
          git cherry-pick 0719a86d30b9c53f3ed9e3a4429925fa631b7d41
          mkdir build && cd build
          cmake -GNinja -DBUILD_PYTHON_BINDING=ON -DLIBVA_SUPPORT=OFF ..
          ninja
          sudo ninja install

      - name: Install onevpl-cpu
        run: |
          git clone -b v2022.2.0 https://github.com/oneapi-src/oneVPL-cpu onevpl-cpu
          cd onevpl-cpu
          source script/bootstrap
          script/build
          sudo script/install

      - name: Python syntax check
        env:
          PYTHONPATH: /usr/local/lib/python
        run: |
          pylint *.py --errors-only
          flake8 *.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 *.py --count --exit-zero --statistics

      - name: Build examples
        env:
          CC: ${{ matrix.compiler.cc}}
          CXX: ${{ matrix.compiler.cxx}}
        run: |
          source /usr/local/etc/vpl/vars.sh
          mkdir build && cd build
          cmake -GNinja ..
          ninja
          ninja test

      - name: Run encode example (C++)
        run: |
          ./build/encodeapp -i res/cars_320x240.i420 -h 320 -w 240
          ./build/encodeapp -i res/cars_320x240.i420 -h 320 -w 240 -r 30 -c hevc -o out.hevc
          cat cars_320x240.json | jq empty

      - name: Run encode example (Python)
        env:
          PYTHONPATH: /usr/local/lib/python
        run: |
          python hello_encode.py
